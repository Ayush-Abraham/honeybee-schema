from enum import Enum
from typing import Optional

from pydantic import BaseModel, ConfigDict, Field
from datetime import datetime

#from xsdata.models.datatype import XmlDateTime
#from xsdata_pydantic.fields import field

# this schema is auto generated by xsdata but 
# xsdata_pydantic is not needed here
# to remove xsdata_pydantic dependence, replace field( with Field(
# also replace XMLDateTime with datetime - this must be output in ISO8601 format

class AbstractBase(BaseModel):
    model_config = ConfigDict(defer_build=True)
    id: Optional[str] = Field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
        },
    )


class AccuRateEngineVersion1(Enum):
    NULL = "Null"
    V001 = "V001"
    V002 = "V002"


class AirGapType1(Enum):
    NULL = "Null"
    NONE = "None"
    ONE = "One"
    TWO = "Two"


class ArrayOfString(BaseModel):
    model_config = ConfigDict(defer_build=True)
    string: list[str] = Field(
        default_factory=list,
        metadata={
            "type": "Element",
            "nillable": True,
        },
    )


class BatteryType1(Enum):
    NULL = "Null"
    LITHIUM = "Lithium"
    LEAD_ACID = "LeadAcid"
    ZINC_BROMINE = "ZincBromine"


class BridgeMaterialFrameType1(Enum):
    NULL = "Null"
    STEEL = "Steel"
    TIMBER = "Timber"


class BuildingClassType1(Enum):
    NULL = "Null"
    ONE_A = "OneA"
    TWO = "Two"
    FOUR = "Four"


class ChenathEngineVersion1(Enum):
    NULL = "Null"
    V001 = "V001"
    V002 = "V002"


class ConstructionType1(Enum):
    NULL = "Null"
    EXTERNAL_WALL = "ExternalWall"
    WINDOW = "Window"
    DOOR = "Door"
    FLOOR_CEILING = "FloorCeiling"
    INTERNAL_WALL = "InternalWall"
    ROOF = "Roof"
    SKYLIGHT = "Skylight"
    ROOF_WINDOW = "RoofWindow"


class DeclarationOfInterestType1(Enum):
    NULL = "Null"
    YES_NOT_MANAGED = "YesNotManaged"
    YES_MANAGED = "YesManaged"
    NO = "No"


class DownlightType1(Enum):
    NULL = "Null"
    NONE = "None"
    HALOGEN = "Halogen"
    INCANDESCENT = "Incandescent"
    COMPACT_FLUORESCENT_LAMP = "CompactFluorescentLamp"
    LIGHT_EMITTING_DIODE = "LightEmittingDiode"


class DwellingExposureType1(Enum):
    NULL = "Null"
    EXPOSED = "Exposed"
    OPEN = "Open"
    SUBURBAN = "Suburban"
    PROTECTED = "Protected"


class DwellingType1(Enum):
    NULL = "Null"
    NEW = "New"
    RENOVATION = "Renovation"
    EXISTING = "Existing"


class EdgeInsulationType1(Enum):
    NULL = "Null"
    NONE = "None"
    R05 = "R05"
    R10 = "R10"
    R15 = "R15"


class ElementType1(Enum):
    NULL = "Null"
    EXTERNAL_WALL = "ExternalWall"
    INTERNAL_WALL = "InternalWall"
    FLOOR_CEILING = "FloorCeiling"
    ROOF = "Roof"
    WINDOW = "Window"
    DOOR = "Door"
    OPAQUE_LOUVRE = "OpaqueLouvre"
    SKYLIGHT = "Skylight"
    ROOF_WINDOW = "RoofWindow"


class ExternalColourType1(Enum):
    NULL = "Null"
    DARK = "Dark"
    MEDIUM = "Medium"
    LIGHT = "Light"
    BRICK_RED_PRESSED_CLAY = "BrickRedPressedClay"
    CONCRETE_DRY = "ConcreteDry"
    COPPER_AGED = "CopperAged"
    FIBRO_CEMENT_WEATHERED = "FibroCementWeathered"
    GALVANISED_IRON_NEW = "GalvanisedIronNew"
    GALVANISED_IRON_WEATHERED = "GalvanisedIronWeathered"
    PAINT_BLACK = "PaintBlack"
    PAINT_LIGHT_CREAM = "PaintLightCream"
    PAINT_LIGHT_GREEN = "PaintLightGreen"
    PAINT_LIGHT_GREY = "PaintLightGrey"
    PAINT_PINK = "PaintPink"
    PAINT_WHITE = "PaintWhite"
    TILES_CLAY_LIGHT_RED = "TilesClayLightRed"
    TILES_CLAY_DARK_PURPLE = "TilesClayDarkPurple"
    TILES_CONCRETE_BLACK = "TilesConcreteBlack"
    TILES_CONCRETE_BROWN = "TilesConcreteBrown"
    TILES_CONCRETE_UNCOLOURED = "TilesConcreteUncoloured"


class FixingFrameType1(Enum):
    NULL = "Null"
    NONE = "None"
    WARM = "Warm"
    HYBRID_OR_COLD = "HybridOrCold"


class FixingMaterialType1(Enum):
    NULL = "Null"
    NONE = "None"
    ALUMINIUM = "Aluminium"
    STEEL = "Steel"


class FloorCeilingConstructionType1(Enum):
    NULL = "Null"
    FLOOR = "Floor"
    CEILING = "Ceiling"


class FrameColourType1(Enum):
    NULL = "Null"
    DARK = "Dark"
    MEDIUM = "Medium"
    LIGHT = "Light"
    PAINT_BLACK = "PaintBlack"
    PAINT_LIGHT_CREAM = "PaintLightCream"
    PAINT_LIGHT_GREEN = "PaintLightGreen"
    PAINT_LIGHT_GREY = "PaintLightGrey"
    PAINT_PINK = "PaintPink"
    PAINT_WHITE = "PaintWhite"


class FrameType1(Enum):
    NULL = "Null"
    STEEL = "Steel"
    TIMBER_PLUS_ALUMINIUM_COVER = "TimberPlusAluminiumCover"
    ALUMINIUM = "Aluminium"
    COMPOSITE = "Composite"
    THERMALLY_BROKEN_ALUMINIUM = "ThermallyBrokenAluminium"
    TIMBER = "Timber"
    UPVC = "UPvc"


class GapSizeType1(Enum):
    NULL = "Null"
    NONE = "None"
    SMALL = "Small"
    MEDIUM = "Medium"
    LARGE = "Large"


class IndoorCoveringType1(Enum):
    NULL = "Null"
    NONE = "None"
    OPEN_WEAVE = "OpenWeave"
    CLOSED_WEAVE = "ClosedWeave"
    HEAVY_DRAPES_ONLY = "HeavyDrapesOnly"
    CURTAINS_PLUS_PELMETS = "CurtainsPlusPelmets"
    HEAVY_DRAPES_PLUS_PELMETS = "HeavyDrapesPlusPelmets"
    HOLLAND_BLINDS = "HollandBlinds"
    VENETIAN_BLINDS = "VenetianBlinds"


class IndoorShadingType1(Enum):
    NULL = "Null"
    NONE = "None"
    ROLLER_BLIND = "RollerBlind"


class InfiltrationPenetrationType1(Enum):
    NULL = "Null"
    CEILING_FAN = "CeilingFan"
    DOWNLIGHT = "Downlight"
    CHIMNEY = "Chimney"
    CEILING_VENT = "CeilingVent"
    UNFLUED_GAS_HEATERS = "UnfluedGasHeaters"
    CEILING_EXHAUST_FAN = "CeilingExhaustFan"
    WALL_VENT = "WallVent"
    WALL_EXHAUST_FAN = "WallExhaustFan"


class InternalColourType1(Enum):
    NULL = "Null"
    DARK = "Dark"
    MEDIUM = "Medium"
    LIGHT = "Light"
    CONCRETE_DRY = "ConcreteDry"
    COPPER_AGED = "CopperAged"
    FIBRO_CEMENT_WEATHERED = "FibroCementWeathered"
    PAINT_BLACK = "PaintBlack"
    PAINT_LIGHT_CREAM = "PaintLightCream"
    PAINT_LIGHT_GREEN = "PaintLightGreen"
    PAINT_LIGHT_GREY = "PaintLightGrey"
    PAINT_PINK = "PaintPink"
    PAINT_WHITE = "PaintWhite"


class LayerDirectionType1(Enum):
    NULL = "Null"
    FORWARD = "Forward"
    REVERSE = "Reverse"


class LoadLimitFloorType1(Enum):
    NULL = "Null"
    CSOG = "CSOG"
    SF = "SF"


class ModuleType1(Enum):
    NULL = "Null"
    HEATING = "Heating"
    COOLING = "Cooling"
    HOT_WATER = "HotWater"
    POOL_SPA = "PoolSpa"
    PLUG_LOAD = "PlugLoad"
    SOLAR_PV = "SolarPv"
    LIGHTING = "Lighting"


class OutdoorCoveringType1(Enum):
    NULL = "Null"
    NONE = "None"
    ROLLER_SHUTTERS = "RollerShutters"
    CANVAS_AWNING_CLOSED = "CanvasAwningClosed"
    CANVAS_AWNING_VENTED = "CanvasAwningVented"
    MINIATURE_LOUVRES = "MiniatureLouvres"
    OUTDOOR_VENETIANS = "OutdoorVenetians"
    FORTY_PERCENT_SHADE_CLOTH = "FortyPercentShadeCloth"
    SIXTY_PERCENT_SHADE_CLOTH = "SixtyPercentShadeCloth"


class OutdoorShadingPercentType1(Enum):
    NULL = "Null"
    NONE = "None"
    TWENTY_PERCENT_SHADE = "TwentyPercentShade"
    FORTY_PERCENT_SHADE = "FortyPercentShade"
    SIXTY_PERCENT_SHADE = "SixtyPercentShade"
    EIGHTY_PERCENT_SHADE = "EightyPercentShade"
    ONE_HUNDRED_PERCENT_SHADE = "OneHundredPercentShade"


class PoolSpaInputType1(Enum):
    NULL = "Null"
    AREA = "Area"
    VOLUME = "Volume"


class PoolSpaPumpType1(Enum):
    NULL = "Null"
    SINGLE_SPEED = "SingleSpeed"
    DUAL_SPEED = "DualSpeed"
    MULTI_SPEED = "MultiSpeed"


class PvDiverterType1(Enum):
    NULL = "Null"
    TYPE1 = "Type1"
    TYPE2 = "Type2"
    TYPE3 = "Type3"


class RoofExposureType1(Enum):
    NULL = "Null"
    NORMAL = "Normal"
    PARASOL = "Parasol"


class RoofspaceOpennessType1(Enum):
    NULL = "Null"
    STANDARD = "Standard"
    VENTILATED = "Ventilated"
    HIGHLY_VENTILATED = "HighlyVentilated"


class RoofspaceSarkingType1(Enum):
    NULL = "Null"
    SARKED = "Sarked"
    UNSARKED = "Unsarked"
    FOIL = "Foil"


class RoofspaceSurfaceType1(Enum):
    NULL = "Null"
    CONTINUOUS = "Continuous"
    DISCONTINUOUS = "Discontinuous"
    SLICK = "Slick"


class ShaftType1(Enum):
    NULL = "Null"
    NONE = "None"
    TUBULAR = "Tubular"
    RECTANGULAR = "Rectangular"


class SimulationType1(Enum):
    NULL = "Null"
    THERMAL_ONLY = "ThermalOnly"
    NEW_HOME = "NewHome"
    EXISTING_HOME = "ExistingHome"
    RESEARCH = "Research"


class SubfloorOpennessType1(Enum):
    NULL = "Null"
    ENCLOSED = "Enclosed"
    OPEN = "Open"
    VERY_OPEN = "VeryOpen"


class WindowType1(Enum):
    NULL = "Null"
    AWNING = "Awning"
    CASEMENT = "Casement"
    DOUBLE_OR_SINGLE_HUNG = "DoubleOrSingleHung"
    LOUVRE = "Louvre"
    SLIDING = "Sliding"
    OTHER = "Other"


class ZoneType1(Enum):
    NULL = "Null"
    OUTDOOR_AIR = "OutdoorAir"
    NEIGHBOUR = "Neighbour"
    GROUND = "Ground"
    LIVING = "Living"
    BEDROOM = "Bedroom"
    LIVING_KITCHEN = "LivingKitchen"
    DAY_TIME = "DayTime"
    UNCONDITIONED = "Unconditioned"
    NIGHT_TIME = "NightTime"
    GARAGE = "Garage"
    GARAGE_CONDITIONED = "GarageConditioned"
    CORRIDOR = "Corridor"
    ROOF_SPACE = "RoofSpace"
    SUBFLOOR = "Subfloor"
    SHARED_BASEMENT_CAR_PARK = "SharedBasementCarPark"


class AbstractZoneInfiltration(AbstractBase):
    model_config = ConfigDict(defer_build=True)
    zone_id: Optional[str] = Field(
        default=None,
        metadata={
            "name": "ZoneId",
            "type": "Element",
        },
    ) 

class AccuRateEngineVersion(BaseModel):
    model_config = ConfigDict(defer_build=True)
    value: AccuRateEngineVersion1 = Field(
        metadata={
            "required": True,
        }
    )


class Acknowledgement(AbstractBase):
    model_config = ConfigDict(defer_build=True)
    separate_load_limits_apply: bool = Field(
        metadata={
            "name": "SeparateLoadLimitsApply",
            "type": "Element",
            "required": True,
        }
    )
    software_provider_responsibilities: bool = Field(
        metadata={
            "name": "SoftwareProviderResponsibilities",
            "type": "Element",
            "required": True,
        }
    )
    provide_all_information: bool = Field(
        metadata={
            "name": "ProvideAllInformation",
            "type": "Element",
            "required": True,
        }
    )
    adherence_to_tech_note: bool = Field(
        metadata={
            "name": "AdherenceToTechNote",
            "type": "Element",
            "required": True,
        }
    )
    software_user_terms: bool = Field(
        metadata={
            "name": "SoftwareUserTerms",
            "type": "Element",
            "required": True,
        }
    )


class Address(AbstractBase):
    model_config = ConfigDict(defer_build=True)
    unit_number: Optional[str] = Field(
        default=None,
        metadata={
            "name": "UnitNumber",
            "type": "Element",
        },
    )
    street_number: Optional[str] = Field(
        metadata={
            "name": "StreetNumber",
            "type": "Element",
            "nillable": True,
        }
    )
    street_name: Optional[str] = Field(
        metadata={
            "name": "StreetName",
            "type": "Element",
            "nillable": True,
        }
    )
    street_type: Optional[str] = Field(
        metadata={
            "name": "StreetType",
            "type": "Element",
            "nillable": True,
        }
    )
    suburb: Optional[str] = Field(
        metadata={
            "name": "Suburb",
            "type": "Element",
            "nillable": True,
        }
    )
    postcode: int = Field(
        metadata={
            "name": "Postcode",
            "type": "Element",
            "required": True,
        }
    )
    state: Optional[str] = Field(
        metadata={
            "name": "State",
            "type": "Element",
            "nillable": True,
        }
    )
    latitude: float = Field(
        metadata={
            "name": "Latitude",
            "type": "Element",
            "required": True,
        }
    )
    longitude: float = Field(
        metadata={
            "name": "Longitude",
            "type": "Element",
            "required": True,
        }
    )
    plus_code: Optional[str] = Field(
        default=None,
        metadata={
            "name": "PlusCode",
            "type": "Element",
        },
    )
    lot_number: Optional[str] = Field(
        default=None,
        metadata={
            "name": "LotNumber",
            "type": "Element",
        },
    )
    dpnumber: Optional[str] = Field(
        metadata={
            "name": "DPNumber",
            "type": "Element",
            "nillable": True,
        }
    )


class AirGapType(BaseModel):
    model_config = ConfigDict(defer_build=True)
    value: AirGapType1 = Field(
        metadata={
            "required": True,
        }
    )


class BatteryType(BaseModel):
    model_config = ConfigDict(defer_build=True)
    value: BatteryType1 = Field(
        metadata={
            "required": True,
        }
    )


class BlockingFactors(AbstractBase):
    model_config = ConfigDict(defer_build=True)
    jan: int = Field(
        metadata={
            "name": "Jan",
            "type": "Element",
            "required": True,
        }
    )
    feb: int = Field(
        metadata={
            "name": "Feb",
            "type": "Element",
            "required": True,
        }
    )
    mar: int = Field(
        metadata={
            "name": "Mar",
            "type": "Element",
            "required": True,
        }
    )
    apr: int = Field(
        metadata={
            "name": "Apr",
            "type": "Element",
            "required": True,
        }
    )
    may: int = Field(
        metadata={
            "name": "May",
            "type": "Element",
            "required": True,
        }
    )
    jun: int = Field(
        metadata={
            "name": "Jun",
            "type": "Element",
            "required": True,
        }
    )
    jul: int = Field(
        metadata={
            "name": "Jul",
            "type": "Element",
            "required": True,
        }
    )
    aug: int = Field(
        metadata={
            "name": "Aug",
            "type": "Element",
            "required": True,
        }
    )
    sep: int = Field(
        metadata={
            "name": "Sep",
            "type": "Element",
            "required": True,
        }
    )
    oct: int = Field(
        metadata={
            "name": "Oct",
            "type": "Element",
            "required": True,
        }
    )
    nov: int = Field(
        metadata={
            "name": "Nov",
            "type": "Element",
            "required": True,
        }
    )
    dec: int = Field(
        metadata={
            "name": "Dec",
            "type": "Element",
            "required": True,
        }
    )


class BridgeMaterialFrameType(BaseModel):
    model_config = ConfigDict(defer_build=True)
    value: BridgeMaterialFrameType1 = Field(
        metadata={
            "required": True,
        }
    )


class BuildingClassType(BaseModel):
    model_config = ConfigDict(defer_build=True)
    value: BuildingClassType1 = Field(
        metadata={
            "required": True,
        }
    )


class ChenathEngineVersion(BaseModel):
    model_config = ConfigDict(defer_build=True)
    value: ChenathEngineVersion1 = Field(
        metadata={
            "required": True,
        }
    )


class Conditioner(AbstractBase):
    model_config = ConfigDict(defer_build=True)
    conditioner_type_id: Optional[str] = Field(
        default=None,
        metadata={
            "name": "ConditionerTypeId",
            "type": "Element",
        },
    )
    star_rating: float = Field(
        metadata={
            "name": "StarRating",
            "type": "Element",
            "required": True,
        }
    )
    capacity: float = Field(
        metadata={
            "name": "Capacity",
            "type": "Element",
            "required": True,
        }
    )
    star_rating_check: bool = Field(
        metadata={
            "name": "StarRatingCheck",
            "type": "Element",
            "required": True,
        }
    )
    capacity_check: bool = Field(
        metadata={
            "name": "CapacityCheck",
            "type": "Element",
            "required": True,
        }
    )
    cop: float = Field(
        metadata={
            "name": "Cop",
            "type": "Element",
            "required": True,
        }
    )
    hspf: float = Field(
        metadata={
            "name": "Hspf",
            "type": "Element",
            "required": True,
        }
    )
    tcspf: float = Field(
        metadata={
            "name": "Tcspf",
            "type": "Element",
            "required": True,
        }
    )
    applied_zone_ids: Optional[ArrayOfString] = Field(
        default=None,
        metadata={
            "name": "AppliedZoneIds",
            "type": "Element",
        },
    )


class ConstructionType(BaseModel):
    model_config = ConfigDict(defer_build=True)
    value: ConstructionType1 = Field(
        metadata={
            "required": True,
        }
    )


class DeclarationOfInterestType(BaseModel):
    model_config = ConfigDict(defer_build=True)
    value: DeclarationOfInterestType1 = Field(
        metadata={
            "required": True,
        }
    )


class DownlightType(BaseModel):
    model_config = ConfigDict(defer_build=True)
    value: DownlightType1 = Field(
        metadata={
            "required": True,
        }
    )


class DwellingExposureType(BaseModel):
    model_config = ConfigDict(defer_build=True)
    value: DwellingExposureType1 = Field(
        metadata={
            "required": True,
        }
    )


class DwellingType(BaseModel):
    model_config = ConfigDict(defer_build=True)
    value: DwellingType1 = Field(
        metadata={
            "required": True,
        }
    )


class EaveHorizontalElementShading(AbstractBase):
    model_config = ConfigDict(defer_build=True)
    eave_horizontal_shading_id: Optional[str] = Field(
        default=None,
        metadata={
            "name": "EaveHorizontalShadingId",
            "type": "Element",
        },
    )
    length: int = Field(
        metadata={
            "name": "Length",
            "type": "Element",
            "required": True,
        }
    )
    width: int = Field(
        metadata={
            "name": "Width",
            "type": "Element",
            "required": True,
        }
    )
    vertical_offset: int = Field(
        metadata={
            "name": "VerticalOffset",
            "type": "Element",
            "required": True,
        }
    )
    horizontal_offset: int = Field(
        metadata={
            "name": "HorizontalOffset",
            "type": "Element",
            "required": True,
        }
    )
    is_projection_length: bool = Field(
        metadata={
            "name": "IsProjectionLength",
            "type": "Element",
            "required": True,
        }
    )


class EaveHorizontalShading(AbstractBase):
    model_config = ConfigDict(defer_build=True)
    length: int = Field(
        metadata={
            "name": "Length",
            "type": "Element",
            "required": True,
        }
    )
    width: int = Field(
        metadata={
            "name": "Width",
            "type": "Element",
            "required": True,
        }
    )
    vertical_offset: int = Field(
        metadata={
            "name": "VerticalOffset",
            "type": "Element",
            "required": True,
        }
    )
    horizontal_offset: int = Field(
        metadata={
            "name": "HorizontalOffset",
            "type": "Element",
            "required": True,
        }
    )
    is_projection_length: bool = Field(
        metadata={
            "name": "IsProjectionLength",
            "type": "Element",
            "required": True,
        }
    )


class EdgeInsulationType(BaseModel):
    model_config = ConfigDict(defer_build=True)
    value: EdgeInsulationType1 = Field(
        metadata={
            "required": True,
        }
    )


class ElementType(BaseModel):
    model_config = ConfigDict(defer_build=True)
    value: ElementType1 = Field(
        metadata={
            "required": True,
        }
    )


class ExternalColourType(BaseModel):
    model_config = ConfigDict(defer_build=True)
    value: ExternalColourType1 = Field(
        metadata={
            "required": True,
        }
    )


class FixingFrameType(BaseModel):
    model_config = ConfigDict(defer_build=True)
    value: FixingFrameType1 = Field(
        metadata={
            "required": True,
        }
    )


class FixingMaterialType(BaseModel):
    model_config = ConfigDict(defer_build=True)
    value: FixingMaterialType1 = Field(
        metadata={
            "required": True,
        }
    )


class FloorCeilingConstructionType(BaseModel):
    model_config = ConfigDict(defer_build=True)
    value: FloorCeilingConstructionType1 = Field(
        metadata={
            "required": True,
        }
    )


class FrameColourType(BaseModel):
    model_config = ConfigDict(defer_build=True)
    value: FrameColourType1 = Field(
        metadata={
            "required": True,
        }
    )


class FrameType(BaseModel):
    model_config = ConfigDict(defer_build=True)
    value: FrameType1 = Field(
        metadata={
            "required": True,
        }
    )


class GapSizeType(BaseModel):
    model_config = ConfigDict(defer_build=True)
    value: GapSizeType1 = Field(
        metadata={
            "required": True,
        }
    )


class IndoorCoveringType(BaseModel):
    model_config = ConfigDict(defer_build=True)
    value: IndoorCoveringType1 = Field(
        metadata={
            "required": True,
        }
    )


class IndoorShadingType(BaseModel):
    model_config = ConfigDict(defer_build=True)
    value: IndoorShadingType1 = Field(
        metadata={
            "required": True,
        }
    )


class InfiltrationPenetrationType(BaseModel):
    model_config = ConfigDict(defer_build=True)
    value: InfiltrationPenetrationType1 = Field(
        metadata={
            "required": True,
        }
    )


class InternalColourType(BaseModel):
    model_config = ConfigDict(defer_build=True)
    value: InternalColourType1 = Field(
        metadata={
            "required": True,
        }
    )


class LayerDirectionType(BaseModel):
    model_config = ConfigDict(defer_build=True)
    value: LayerDirectionType1 = Field(
        metadata={
            "required": True,
        }
    )


class LoadLimitFloorType(BaseModel):
    model_config = ConfigDict(defer_build=True)
    value: LoadLimitFloorType1 = Field(
        metadata={
            "required": True,
        }
    )


class ModuleType(BaseModel):
    model_config = ConfigDict(defer_build=True)
    value: ModuleType1 = Field(
        metadata={
            "required": True,
        }
    )


class OutdoorCoveringType(BaseModel):
    model_config = ConfigDict(defer_build=True)
    value: OutdoorCoveringType1 = Field(
        metadata={
            "required": True,
        }
    )


class OutdoorShadingPercentType(BaseModel):
    model_config = ConfigDict(defer_build=True)
    value: OutdoorShadingPercentType1 = Field(
        metadata={
            "required": True,
        }
    )


class PergolaHorizontalElementShading(AbstractBase):
    model_config = ConfigDict(defer_build=True)
    pergola_horizontal_shading_id: Optional[str] = Field(
        default=None,
        metadata={
            "name": "PergolaHorizontalShadingId",
            "type": "Element",
        },
    )
    length: int = Field(
        metadata={
            "name": "Length",
            "type": "Element",
            "required": True,
        }
    )
    width: int = Field(
        metadata={
            "name": "Width",
            "type": "Element",
            "required": True,
        }
    )
    vertical_offset: int = Field(
        metadata={
            "name": "VerticalOffset",
            "type": "Element",
            "required": True,
        }
    )
    horizontal_offset: int = Field(
        metadata={
            "name": "HorizontalOffset",
            "type": "Element",
            "required": True,
        }
    )
    is_projection_length: bool = Field(
        metadata={
            "name": "IsProjectionLength",
            "type": "Element",
            "required": True,
        }
    )


class PergolaHorizontalShading(AbstractBase):
    model_config = ConfigDict(defer_build=True)
    length: int = Field(
        metadata={
            "name": "Length",
            "type": "Element",
            "required": True,
        }
    )
    width: int = Field(
        metadata={
            "name": "Width",
            "type": "Element",
            "required": True,
        }
    )
    vertical_offset: int = Field(
        metadata={
            "name": "VerticalOffset",
            "type": "Element",
            "required": True,
        }
    )
    horizontal_offset: int = Field(
        metadata={
            "name": "HorizontalOffset",
            "type": "Element",
            "required": True,
        }
    )
    is_projection_length: bool = Field(
        metadata={
            "name": "IsProjectionLength",
            "type": "Element",
            "required": True,
        }
    )


class PlanDocument(AbstractBase):
    model_config = ConfigDict(defer_build=True)
    version_number: Optional[str] = Field(
        default=None,
        metadata={
            "name": "VersionNumber",
            "type": "Element",
        },
    )
    reference_number: Optional[str] = Field(
        default=None,
        metadata={
            "name": "ReferenceNumber",
            "type": "Element",
        },
    )
    plan_date_time: datetime = Field(
        metadata={
            "name": "PlanDateTime",
            "type": "Element",
            "required": True,
        }
    )
    prepared_by: Optional[str] = Field(
        default=None,
        metadata={
            "name": "PreparedBy",
            "type": "Element",
        },
    )


class PoolSpaInputType(BaseModel):
    model_config = ConfigDict(defer_build=True)
    value: PoolSpaInputType1 = Field(
        metadata={
            "required": True,
        }
    )


class PoolSpaPumpType(BaseModel):
    model_config = ConfigDict(defer_build=True)
    value: PoolSpaPumpType1 = Field(
        metadata={
            "required": True,
        }
    )


class PvDiverterType(BaseModel):
    model_config = ConfigDict(defer_build=True)
    value: PvDiverterType1 = Field(
        metadata={
            "required": True,
        }
    )


class PvOrientation(AbstractBase):
    model_config = ConfigDict(defer_build=True)
    collector_slope: float = Field(
        metadata={
            "name": "CollectorSlope",
            "type": "Element",
            "required": True,
        }
    )
    size: float = Field(
        metadata={
            "name": "Size",
            "type": "Element",
            "required": True,
        }
    )
    azimuth_angle: float = Field(
        metadata={
            "name": "AzimuthAngle",
            "type": "Element",
            "required": True,
        }
    )
    diffuse_reflectance: float = Field(
        metadata={
            "name": "DiffuseReflectance",
            "type": "Element",
            "required": True,
        }
    )


class RoofData(AbstractBase):
    model_config = ConfigDict(defer_build=True)
    simple_roof_type_id: int = Field(
        metadata={
            "name": "SimpleRoofTypeId",
            "type": "Element",
            "required": True,
        }
    )
    length: int = Field(
        metadata={
            "name": "Length",
            "type": "Element",
            "required": True,
        }
    )
    width: int = Field(
        metadata={
            "name": "Width",
            "type": "Element",
            "required": True,
        }
    )
    pitch: float = Field(
        metadata={
            "name": "Pitch",
            "type": "Element",
            "required": True,
        }
    )
    azimuth: int = Field(
        metadata={
            "name": "Azimuth",
            "type": "Element",
            "required": True,
        }
    )


class RoofExposureType(BaseModel):
    model_config = ConfigDict(defer_build=True)
    value: RoofExposureType1 = Field(
        metadata={
            "required": True,
        }
    )


class RoofspaceOpennessType(BaseModel):
    model_config = ConfigDict(defer_build=True)
    value: RoofspaceOpennessType1 = Field(
        metadata={
            "required": True,
        }
    )


class RoofspaceSarkingType(BaseModel):
    model_config = ConfigDict(defer_build=True)
    value: RoofspaceSarkingType1 = Field(
        metadata={
            "required": True,
        }
    )


class RoofspaceSurfaceType(BaseModel):
    model_config = ConfigDict(defer_build=True)
    value: RoofspaceSurfaceType1 = Field(
        metadata={
            "required": True,
        }
    )


class ShaftType(BaseModel):
    model_config = ConfigDict(defer_build=True)
    value: ShaftType1 = Field(
        metadata={
            "required": True,
        }
    )


class SimulationType(BaseModel):
    model_config = ConfigDict(defer_build=True)
    value: SimulationType1 = Field(
        metadata={
            "required": True,
        }
    )


class SubfloorOpennessType(BaseModel):
    model_config = ConfigDict(defer_build=True)
    value: SubfloorOpennessType1 = Field(
        metadata={
            "required": True,
        }
    )


class Ventilation(AbstractBase):
    model_config = ConfigDict(defer_build=True)
    azimuth: int = Field(
        metadata={
            "name": "Azimuth",
            "type": "Element",
            "required": True,
        }
    )
    footprint_height: int = Field(
        metadata={
            "name": "FootprintHeight",
            "type": "Element",
            "required": True,
        }
    )
    footprint_width: int = Field(
        metadata={
            "name": "FootprintWidth",
            "type": "Element",
            "required": True,
        }
    )
    footprint_left: int = Field(
        metadata={
            "name": "FootprintLeft",
            "type": "Element",
            "required": True,
        }
    )
    footprint_top: int = Field(
        metadata={
            "name": "FootprintTop",
            "type": "Element",
            "required": True,
        }
    )


class VerticalElementShading(AbstractBase):
    model_config = ConfigDict(defer_build=True)
    name: Optional[str] = Field(
        default=None,
        metadata={
            "name": "Name",
            "type": "Element",
        },
    )
    distance: int = Field(
        metadata={
            "name": "Distance",
            "type": "Element",
            "required": True,
        }
    )
    external_wall_id: Optional[str] = Field(
        default=None,
        metadata={
            "name": "ExternalWallId",
            "type": "Element",
        },
    )
    vertical_shading_id: Optional[str] = Field(
        default=None,
        metadata={
            "name": "VerticalShadingId",
            "type": "Element",
        },
    )
    vertical_offset: int = Field(
        metadata={
            "name": "VerticalOffset",
            "type": "Element",
            "required": True,
        }
    )
    horizontal_offset: int = Field(
        metadata={
            "name": "HorizontalOffset",
            "type": "Element",
            "required": True,
        }
    )


class WindowType(BaseModel):
    model_config = ConfigDict(defer_build=True)
    value: WindowType1 = Field(
        metadata={
            "required": True,
        }
    )


class WingWall(AbstractBase):
    model_config = ConfigDict(defer_build=True)
    projection: int = Field(
        metadata={
            "name": "Projection",
            "type": "Element",
            "required": True,
        }
    )
    horizontal_offset: int = Field(
        metadata={
            "name": "HorizontalOffset",
            "type": "Element",
            "required": True,
        }
    )
    vertical_offset: int = Field(
        metadata={
            "name": "VerticalOffset",
            "type": "Element",
            "required": True,
        }
    )


class ZoneType(BaseModel):
    model_config = ConfigDict(defer_build=True)
    value: ZoneType1 = Field(
        metadata={
            "required": True,
        }
    )


class AbstractElement(AbstractBase):
    model_config = ConfigDict(defer_build=True)
    name: Optional[str] = Field(
        default=None,
        metadata={
            "name": "Name",
            "type": "Element",
        },
    )
    construction_id: Optional[str] = Field(
        default=None,
        metadata={
            "name": "ConstructionId",
            "type": "Element",
        },
    )
    element_type: ElementType = Field(
        metadata={
            "name": "ElementType",
            "type": "Element",
            "required": True,
        }
    )
    opening_area: float = Field(
        metadata={
            "name": "OpeningArea",
            "type": "Element",
            "required": True,
        }
    )


class AbstractModule(AbstractBase):
    model_config = ConfigDict(defer_build=True)
    module_type: ModuleType = Field(
        metadata={
            "name": "ModuleType",
            "type": "Element",
            "required": True,
        }
    )
    is_applied: bool = Field(
        metadata={
            "name": "IsApplied",
            "type": "Element",
            "required": True,
        }
    )


class ArrayOfConditioner(BaseModel):
    model_config = ConfigDict(defer_build=True)
    conditioner: list[Conditioner] = Field(
        default_factory=list,
        metadata={
            "name": "Conditioner",
            "type": "Element",
            "nillable": True,
        },
    )


class ArrayOfPvOrientation(BaseModel):
    model_config = ConfigDict(defer_build=True)
    pv_orientation: list[PvOrientation] = Field(
        default_factory=list,
        metadata={
            "name": "PvOrientation",
            "type": "Element",
            "nillable": True,
        },
    )


class ArrayOfVerticalElementShading(BaseModel):
    model_config = ConfigDict(defer_build=True)
    vertical_element_shading: list[VerticalElementShading] = Field(
        default_factory=list,
        metadata={
            "name": "VerticalElementShading",
            "type": "Element",
            "nillable": True,
        },
    )


class BridgeMaterial(AbstractBase):
    model_config = ConfigDict(defer_build=True)
    construction_layer_id: Optional[str] = Field(
        default=None,
        metadata={
            "name": "ConstructionLayerId",
            "type": "Element",
        },
    )
    sequence_number: int = Field(
        metadata={
            "name": "SequenceNumber",
            "type": "Element",
            "required": True,
        }
    )
    bridge_material_frame_type: BridgeMaterialFrameType = Field(
        metadata={
            "name": "BridgeMaterialFrameType",
            "type": "Element",
            "required": True,
        }
    )
    floor_ceiling_construction_type: FloorCeilingConstructionType = Field(
        metadata={
            "name": "FloorCeilingConstructionType",
            "type": "Element",
            "required": True,
        }
    )
    bridge_material_index: int = Field(
        metadata={
            "name": "BridgeMaterialIndex",
            "type": "Element",
            "required": True,
        }
    )
    base_metal_thickness: float = Field(
        metadata={
            "name": "BaseMetalThickness",
            "type": "Element",
            "required": True,
        }
    )
    has_thermal_break_applied: bool = Field(
        metadata={
            "name": "HasThermalBreakApplied",
            "type": "Element",
            "required": True,
        }
    )
    thermal_break: float = Field(
        metadata={
            "name": "ThermalBreak",
            "type": "Element",
            "required": True,
        }
    )
    air_gap_type: AirGapType = Field(
        metadata={
            "name": "AirGapType",
            "type": "Element",
            "required": True,
        }
    )
    air_gap_width: float = Field(
        metadata={
            "name": "AirGapWidth",
            "type": "Element",
            "required": True,
        }
    )
    air_gap_thickness: float = Field(
        metadata={
            "name": "AirGapThickness",
            "type": "Element",
            "required": True,
        }
    )
    is_calculate_fraction: bool = Field(
        metadata={
            "name": "IsCalculateFraction",
            "type": "Element",
            "required": True,
        }
    )
    fraction: float = Field(
        metadata={
            "name": "Fraction",
            "type": "Element",
            "required": True,
        }
    )
    stud_depth: int = Field(
        metadata={
            "name": "StudDepth",
            "type": "Element",
            "required": True,
        }
    )
    stud_width: int = Field(
        metadata={
            "name": "StudWidth",
            "type": "Element",
            "required": True,
        }
    )
    stud_spacing: int = Field(
        metadata={
            "name": "StudSpacing",
            "type": "Element",
            "required": True,
        }
    )
    stud_flange_width: int = Field(
        metadata={
            "name": "StudFlangeWidth",
            "type": "Element",
            "required": True,
        }
    )
    nogging_depth: int = Field(
        metadata={
            "name": "NoggingDepth",
            "type": "Element",
            "required": True,
        }
    )
    nogging_width: int = Field(
        metadata={
            "name": "NoggingWidth",
            "type": "Element",
            "required": True,
        }
    )
    nogging_spacing: int = Field(
        metadata={
            "name": "NoggingSpacing",
            "type": "Element",
            "required": True,
        }
    )
    nogging_flange_width: int = Field(
        metadata={
            "name": "NoggingFlangeWidth",
            "type": "Element",
            "required": True,
        }
    )


class Dwelling(AbstractBase):
    model_config = ConfigDict(defer_build=True)
    climate_zone: int = Field(
        metadata={
            "name": "ClimateZone",
            "type": "Element",
            "required": True,
        }
    )
    ground_reflectance: float = Field(
        metadata={
            "name": "GroundReflectance",
            "type": "Element",
            "required": True,
        }
    )
    council_submitted_to: Optional[str] = Field(
        default=None,
        metadata={
            "name": "CouncilSubmittedTo",
            "type": "Element",
        },
    )
    dwelling_exposure_type: DwellingExposureType = Field(
        metadata={
            "name": "DwellingExposureType",
            "type": "Element",
            "required": True,
        }
    )
    dwelling_type: DwellingType = Field(
        metadata={
            "name": "DwellingType",
            "type": "Element",
            "required": True,
        }
    )
    address: Optional[Address] = Field(
        default=None,
        metadata={
            "name": "Address",
            "type": "Element",
        },
    )
    floor_entrance: Optional[str] = Field(
        default=None,
        metadata={
            "name": "FloorEntrance",
            "type": "Element",
        },
    )
    floor_count: int = Field(
        metadata={
            "name": "FloorCount",
            "type": "Element",
            "required": True,
        }
    )


class FixingData(AbstractBase):
    model_config = ConfigDict(defer_build=True)
    fixing_frame_type: FixingFrameType = Field(
        metadata={
            "name": "FixingFrameType",
            "type": "Element",
            "required": True,
        }
    )
    layer_number: int = Field(
        metadata={
            "name": "LayerNumber",
            "type": "Element",
            "required": True,
        }
    )
    cross_section_area: float = Field(
        metadata={
            "name": "CrossSectionArea",
            "type": "Element",
            "required": True,
        }
    )
    number_per_square_meter: int = Field(
        metadata={
            "name": "NumberPerSquareMeter",
            "type": "Element",
            "required": True,
        }
    )
    fixing_material_type: FixingMaterialType = Field(
        metadata={
            "name": "FixingMaterialType",
            "type": "Element",
            "required": True,
        }
    )


class HeatingCoolingLimit(AbstractBase):
    model_config = ConfigDict(defer_build=True)
    load_limit_floor_type: LoadLimitFloorType = Field(
        metadata={
            "name": "LoadLimitFloorType",
            "type": "Element",
            "required": True,
        }
    )
    is_nccclimate_zone1_or2: bool = Field(
        metadata={
            "name": "IsNCCClimateZone1Or2",
            "type": "Element",
            "required": True,
        }
    )
    has_out_door_living_area: bool = Field(
        metadata={
            "name": "HasOutDoorLivingArea",
            "type": "Element",
            "required": True,
        }
    )
    has_out_door_living_area_ceiling_fan: bool = Field(
        metadata={
            "name": "HasOutDoorLivingAreaCeilingFan",
            "type": "Element",
            "required": True,
        }
    )


class HorizontalElementShading(AbstractBase):
    model_config = ConfigDict(defer_build=True)
    name: Optional[str] = Field(
        default=None,
        metadata={
            "name": "Name",
            "type": "Element",
        },
    )
    horizontal_shading_id: Optional[str] = Field(
        default=None,
        metadata={
            "name": "HorizontalShadingId",
            "type": "Element",
        },
    )
    eave_horizontal_element_shading: Optional[EaveHorizontalElementShading] = (
        Field(
            default=None,
            metadata={
                "name": "EaveHorizontalElementShading",
                "type": "Element",
            },
        )
    )
    pergola_horizontal_element_shading: Optional[
        PergolaHorizontalElementShading
    ] = Field(
        default=None,
        metadata={
            "name": "PergolaHorizontalElementShading",
            "type": "Element",
        },
    )


class HorizontalShading(AbstractBase):
    model_config = ConfigDict(defer_build=True)
    development_id: Optional[str] = Field(
        default=None,
        metadata={
            "name": "DevelopmentId",
            "type": "Element",
        },
    )
    name: Optional[str] = Field(
        default=None,
        metadata={
            "name": "Name",
            "type": "Element",
        },
    )
    eave_horizontal_shading: Optional[EaveHorizontalShading] = Field(
        default=None,
        metadata={
            "name": "EaveHorizontalShading",
            "type": "Element",
        },
    )
    pergola_horizontal_shading: Optional[PergolaHorizontalShading] = Field(
        default=None,
        metadata={
            "name": "PergolaHorizontalShading",
            "type": "Element",
        },
    )
    blocking_factors: Optional[BlockingFactors] = Field(
        default=None,
        metadata={
            "name": "BlockingFactors",
            "type": "Element",
        },
    )


class InfiltrationPenetration(AbstractBase):
    model_config = ConfigDict(defer_build=True)
    zone_above_id: Optional[str] = Field(
        default=None,
        metadata={
            "name": "ZoneAboveId",
            "type": "Element",
        },
    )
    name: Optional[str] = Field(
        default=None,
        metadata={
            "name": "Name",
            "type": "Element",
        },
    )
    infiltration_penetration_type: InfiltrationPenetrationType = Field(
        metadata={
            "name": "InfiltrationPenetrationType",
            "type": "Element",
            "required": True,
        }
    )
    downlight_type: DownlightType = Field(
        metadata={
            "name": "DownlightType",
            "type": "Element",
            "required": True,
        }
    )
    quantity: int = Field(
        metadata={
            "name": "Quantity",
            "type": "Element",
            "required": True,
        }
    )
    diameter: int = Field(
        metadata={
            "name": "Diameter",
            "type": "Element",
            "required": True,
        }
    )
    is_vent_heat_light: bool = Field(
        metadata={
            "name": "IsVentHeatLight",
            "type": "Element",
            "required": True,
        }
    )
    length: int = Field(
        metadata={
            "name": "Length",
            "type": "Element",
            "required": True,
        }
    )
    width: int = Field(
        metadata={
            "name": "Width",
            "type": "Element",
            "required": True,
        }
    )
    clearance: int = Field(
        metadata={
            "name": "Clearance",
            "type": "Element",
            "required": True,
        }
    )
    is_sealed: bool = Field(
        metadata={
            "name": "IsSealed",
            "type": "Element",
            "required": True,
        }
    )
    is_insulated: bool = Field(
        metadata={
            "name": "IsInsulated",
            "type": "Element",
            "required": True,
        }
    )
    is_covered: bool = Field(
        metadata={
            "name": "IsCovered",
            "type": "Element",
            "required": True,
        }
    )


class PersonalData(AbstractBase):
    model_config = ConfigDict(defer_build=True)
    first_name: Optional[str] = Field(
        default=None,
        metadata={
            "name": "FirstName",
            "type": "Element",
        },
    )
    last_name: Optional[str] = Field(
        default=None,
        metadata={
            "name": "LastName",
            "type": "Element",
        },
    )
    phone: Optional[str] = Field(
        default=None,
        metadata={
            "name": "Phone",
            "type": "Element",
        },
    )
    email: Optional[str] = Field(
        default=None,
        metadata={
            "name": "Email",
            "type": "Element",
        },
    )
    abn: Optional[str] = Field(
        default=None,
        metadata={
            "name": "ABN",
            "type": "Element",
        },
    )
    address: Optional[Address] = Field(
        default=None,
        metadata={
            "name": "Address",
            "type": "Element",
        },
    )


class RoofspaceZoneInfiltration(AbstractZoneInfiltration):
    model_config = ConfigDict(defer_build=True)
    sarking_type: RoofspaceSarkingType = Field(
        metadata={
            "name": "SarkingType",
            "type": "Element",
            "required": True,
        }
    )
    surface_type: RoofspaceSurfaceType = Field(
        metadata={
            "name": "SurfaceType",
            "type": "Element",
            "required": True,
        }
    )
    openness_type: RoofspaceOpennessType = Field(
        metadata={
            "name": "OpennessType",
            "type": "Element",
            "required": True,
        }
    )


class SimulationConfiguration(AbstractBase):
    model_config = ConfigDict(defer_build=True)
    simulation_type: SimulationType = Field(
        metadata={
            "name": "SimulationType",
            "type": "Element",
            "required": True,
        }
    )
    use_default_design_variation_only: bool = Field(
        metadata={
            "name": "UseDefaultDesignVariationOnly",
            "type": "Element",
            "required": True,
        }
    )


class SubfloorZoneInfiltration(AbstractZoneInfiltration):
    model_config = ConfigDict(defer_build=True)
    openness_type: SubfloorOpennessType = Field(
        metadata={
            "name": "OpennessType",
            "type": "Element",
            "required": True,
        }
    )
    has_wall_cavity: bool = Field(
        metadata={
            "name": "HasWallCavity",
            "type": "Element",
            "required": True,
        }
    )
    ventilation_openings_total_area: float = Field(
        metadata={
            "name": "VentilationOpeningsTotalArea",
            "type": "Element",
            "required": True,
        }
    )


class VerticalShading(AbstractBase):
    model_config = ConfigDict(defer_build=True)
    development_id: Optional[str] = Field(
        default=None,
        metadata={
            "name": "DevelopmentId",
            "type": "Element",
        },
    )
    name: Optional[str] = Field(
        default=None,
        metadata={
            "name": "Name",
            "type": "Element",
        },
    )
    height: int = Field(
        metadata={
            "name": "Height",
            "type": "Element",
            "required": True,
        }
    )
    width: int = Field(
        metadata={
            "name": "Width",
            "type": "Element",
            "required": True,
        }
    )
    vertical_offset: int = Field(
        metadata={
            "name": "VerticalOffset",
            "type": "Element",
            "required": True,
        }
    )
    horizontal_offset: int = Field(
        metadata={
            "name": "HorizontalOffset",
            "type": "Element",
            "required": True,
        }
    )
    distance: int = Field(
        metadata={
            "name": "Distance",
            "type": "Element",
            "required": True,
        }
    )
    blocking_factors: Optional[BlockingFactors] = Field(
        default=None,
        metadata={
            "name": "BlockingFactors",
            "type": "Element",
        },
    )


class AbstractExternalElement(AbstractElement):
    model_config = ConfigDict(defer_build=True)
    length: int = Field(
        metadata={
            "name": "Length",
            "type": "Element",
            "required": True,
        }
    )
    height: int = Field(
        metadata={
            "name": "Height",
            "type": "Element",
            "required": True,
        }
    )
    has_insect_screens: bool = Field(
        metadata={
            "name": "HasInsectScreens",
            "type": "Element",
            "required": True,
        }
    )


class AbstractInternalElement(AbstractElement):
    model_config = ConfigDict(defer_build=True)
    is_opening_controlled: bool = Field(
        metadata={
            "name": "IsOpeningControlled",
            "type": "Element",
            "required": True,
        }
    )


class ArrayOfBridgeMaterial(BaseModel):
    model_config = ConfigDict(defer_build=True)
    bridge_material: list[BridgeMaterial] = Field(
        default_factory=list,
        metadata={
            "name": "BridgeMaterial",
            "type": "Element",
            "nillable": True,
        },
    )


class ArrayOfHorizontalShading(BaseModel):
    model_config = ConfigDict(defer_build=True)
    horizontal_shading: list[HorizontalShading] = Field(
        default_factory=list,
        metadata={
            "name": "HorizontalShading",
            "type": "Element",
            "nillable": True,
        },
    )


class ArrayOfInfiltrationPenetration(BaseModel):
    model_config = ConfigDict(defer_build=True)
    infiltration_penetration: list[InfiltrationPenetration] = Field(
        default_factory=list,
        metadata={
            "name": "InfiltrationPenetration",
            "type": "Element",
            "nillable": True,
        },
    )


class ArrayOfVerticalShading(BaseModel):
    model_config = ConfigDict(defer_build=True)
    vertical_shading: list[VerticalShading] = Field(
        default_factory=list,
        metadata={
            "name": "VerticalShading",
            "type": "Element",
            "nillable": True,
        },
    )


class Assessor(AbstractBase):
    model_config = ConfigDict(defer_build=True)
    accrediting_assessor_organisation: Optional[str] = Field(
        default=None,
        metadata={
            "name": "AccreditingAssessorOrganisation",
            "type": "Element",
        },
    )
    member_number: Optional[str] = Field(
        default=None,
        metadata={
            "name": "MemberNumber",
            "type": "Element",
        },
    )
    organisation: Optional[str] = Field(
        default=None,
        metadata={
            "name": "Organisation",
            "type": "Element",
        },
    )
    personal_data: Optional[PersonalData] = Field(
        default=None,
        metadata={
            "name": "PersonalData",
            "type": "Element",
        },
    )


class Client(AbstractBase):
    model_config = ConfigDict(defer_build=True)
    personal_data: Optional[PersonalData] = Field(
        default=None,
        metadata={
            "name": "PersonalData",
            "type": "Element",
        },
    )


class CoolingModule(AbstractModule):
    model_config = ConfigDict(defer_build=True)
    cooling_devices: Optional[ArrayOfConditioner] = Field(
        default=None,
        metadata={
            "name": "CoolingDevices",
            "type": "Element",
        },
    )


class HeatingModule(AbstractModule):
    model_config = ConfigDict(defer_build=True)
    heating_devices: Optional[ArrayOfConditioner] = Field(
        default=None,
        metadata={
            "name": "HeatingDevices",
            "type": "Element",
        },
    )


class HotWaterModule(AbstractModule):
    model_config = ConfigDict(defer_build=True)
    hot_water_system_type: Optional[str] = Field(
        default=None,
        metadata={
            "name": "HotWaterSystemType",
            "type": "Element",
        },
    )
    pv_diverter_type: PvDiverterType = Field(
        metadata={
            "name": "PvDiverterType",
            "type": "Element",
            "required": True,
        }
    )
    pv_diverter_tank_volume: float = Field(
        metadata={
            "name": "PvDiverterTankVolume",
            "type": "Element",
            "required": True,
        }
    )
    stc: int = Field(
        metadata={
            "name": "STC",
            "type": "Element",
            "required": True,
        }
    )


class LightingModule(AbstractModule):
    model_config = ConfigDict(defer_build=True)
    power_density: float = Field(
        metadata={
            "name": "PowerDensity",
            "type": "Element",
            "required": True,
        }
    )


class PlugLoadModule(AbstractModule):
    model_config = ConfigDict(defer_build=True)
    oven_type: Optional[str] = Field(
        default=None,
        metadata={
            "name": "OvenType",
            "type": "Element",
        },
    )
    cook_type: Optional[str] = Field(
        default=None,
        metadata={
            "name": "CookType",
            "type": "Element",
        },
    )


class PoolSpaModule(AbstractModule):
    model_config = ConfigDict(defer_build=True)
    pool_spa_pump_type: PoolSpaPumpType = Field(
        metadata={
            "name": "PoolSpaPumpType",
            "type": "Element",
            "required": True,
        }
    )
    pool_spa_input_type: PoolSpaInputType = Field(
        metadata={
            "name": "PoolSpaInputType",
            "type": "Element",
            "required": True,
        }
    )
    pool_spa_volume: float = Field(
        metadata={
            "name": "PoolSpaVolume",
            "type": "Element",
            "required": True,
        }
    )
    pool_spa_area: float = Field(
        metadata={
            "name": "PoolSpaArea",
            "type": "Element",
            "required": True,
        }
    )
    average_depth: float = Field(
        metadata={
            "name": "AverageDepth",
            "type": "Element",
            "required": True,
        }
    )


class SolarPvModule(AbstractModule):
    model_config = ConfigDict(defer_build=True)
    latitude: float = Field(
        metadata={
            "name": "Latitude",
            "type": "Element",
            "required": True,
        }
    )
    longitude: float = Field(
        metadata={
            "name": "Longitude",
            "type": "Element",
            "required": True,
        }
    )
    network_limit: float = Field(
        metadata={
            "name": "NetworkLimit",
            "type": "Element",
            "required": True,
        }
    )
    soiling_losses: float = Field(
        metadata={
            "name": "SoilingLosses",
            "type": "Element",
            "required": True,
        }
    )
    dc_wiring_losses: float = Field(
        metadata={
            "name": "DcWiringLosses",
            "type": "Element",
            "required": True,
        }
    )
    conversion_losses: float = Field(
        metadata={
            "name": "ConversionLosses",
            "type": "Element",
            "required": True,
        }
    )
    standard_amount_of_radiation_used: float = Field(
        metadata={
            "name": "StandardAmountOfRadiationUsed",
            "type": "Element",
            "required": True,
        }
    )
    total_capacity_inverters: float = Field(
        metadata={
            "name": "TotalCapacityInverters",
            "type": "Element",
            "required": True,
        }
    )
    time_zone: float = Field(
        metadata={
            "name": "TimeZone",
            "type": "Element",
            "required": True,
        }
    )
    battery_present: bool = Field(
        metadata={
            "name": "BatteryPresent",
            "type": "Element",
            "required": True,
        }
    )
    battery_type: BatteryType = Field(
        metadata={
            "name": "BatteryType",
            "type": "Element",
            "required": True,
        }
    )
    battery_capacity: float = Field(
        metadata={
            "name": "BatteryCapacity",
            "type": "Element",
            "required": True,
        }
    )
    pv_orientations: Optional[ArrayOfPvOrientation] = Field(
        default=None,
        metadata={
            "name": "PvOrientations",
            "type": "Element",
        },
    )


class AbstractSkylightRoofWindow(AbstractExternalElement):
    model_config = ConfigDict(defer_build=True)
    indoor_shading_type: IndoorShadingType = Field(
        metadata={
            "name": "IndoorShadingType",
            "type": "Element",
            "required": True,
        }
    )
    outdoor_shading_percent_type: OutdoorShadingPercentType = Field(
        metadata={
            "name": "OutdoorShadingPercentType",
            "type": "Element",
            "required": True,
        }
    )
    openable_percent: int = Field(
        metadata={
            "name": "OpenablePercent",
            "type": "Element",
            "required": True,
        }
    )
    has_diffuser: bool = Field(
        metadata={
            "name": "HasDiffuser",
            "type": "Element",
            "required": True,
        }
    )
    pitch: float = Field(
        metadata={
            "name": "Pitch",
            "type": "Element",
            "required": True,
        }
    )
    gross_area: float = Field(
        metadata={
            "name": "GrossArea",
            "type": "Element",
            "required": True,
        }
    )


class ConstructionLayer(AbstractBase):
    model_config = ConfigDict(defer_build=True)
    layer_number: int = Field(
        metadata={
            "name": "LayerNumber",
            "type": "Element",
            "required": True,
        }
    )
    material: int = Field(
        metadata={
            "name": "Material",
            "type": "Element",
            "required": True,
        }
    )
    thickness: int = Field(
        metadata={
            "name": "Thickness",
            "type": "Element",
            "required": True,
        }
    )
    bridge_materials: Optional[ArrayOfBridgeMaterial] = Field(
        default=None,
        metadata={
            "name": "BridgeMaterials",
            "type": "Element",
        },
    )


class Door(AbstractExternalElement):
    model_config = ConfigDict(defer_build=True)
    horizontal_offset: int = Field(
        metadata={
            "name": "HorizontalOffset",
            "type": "Element",
            "required": True,
        }
    )
    openable_percent: int = Field(
        metadata={
            "name": "OpenablePercent",
            "type": "Element",
            "required": True,
        }
    )
    is_weather_stripped: bool = Field(
        metadata={
            "name": "IsWeatherStripped",
            "type": "Element",
            "required": True,
        }
    )
    gap_size_type: GapSizeType = Field(
        metadata={
            "name": "GapSizeType",
            "type": "Element",
            "required": True,
        }
    )


class FloorCeiling(AbstractInternalElement):
    model_config = ConfigDict(defer_build=True)
    adjacent_zone_above_id: Optional[str] = Field(
        default=None,
        metadata={
            "name": "AdjacentZoneAboveId",
            "type": "Element",
        },
    )
    adjacent_zone_below_id: Optional[str] = Field(
        default=None,
        metadata={
            "name": "AdjacentZoneBelowId",
            "type": "Element",
        },
    )
    ceiling_floor_height: int = Field(
        metadata={
            "name": "CeilingFloorHeight",
            "type": "Element",
            "required": True,
        }
    )
    edge_insulation_rvalue: float = Field(
        metadata={
            "name": "EdgeInsulationRValue",
            "type": "Element",
            "required": True,
        }
    )
    gross_area: float = Field(
        metadata={
            "name": "GrossArea",
            "type": "Element",
            "required": True,
        }
    )
    level: int = Field(
        metadata={
            "name": "Level",
            "type": "Element",
            "required": True,
        }
    )
    infiltration_penetrations: Optional[ArrayOfInfiltrationPenetration] = (
        Field(
            default=None,
            metadata={
                "name": "InfiltrationPenetrations",
                "type": "Element",
            },
        )
    )


class InternalWall(AbstractInternalElement):
    model_config = ConfigDict(defer_build=True)
    adjacent_zone_aid: Optional[str] = Field(
        default=None,
        metadata={
            "name": "AdjacentZoneAId",
            "type": "Element",
        },
    )
    adjacent_zone_bid: Optional[str] = Field(
        default=None,
        metadata={
            "name": "AdjacentZoneBId",
            "type": "Element",
        },
    )
    below_wall_id: Optional[str] = Field(
        default=None,
        metadata={
            "name": "BelowWallId",
            "type": "Element",
        },
    )
    above_wall_id: Optional[str] = Field(
        default=None,
        metadata={
            "name": "AboveWallId",
            "type": "Element",
        },
    )
    length: int = Field(
        metadata={
            "name": "Length",
            "type": "Element",
            "required": True,
        }
    )
    height: int = Field(
        metadata={
            "name": "Height",
            "type": "Element",
            "required": True,
        }
    )
    layer_direction_type: LayerDirectionType = Field(
        metadata={
            "name": "LayerDirectionType",
            "type": "Element",
            "required": True,
        }
    )


class OpaqueLouvre(AbstractExternalElement):
    model_config = ConfigDict(defer_build=True)
    horizontal_offset: int = Field(
        metadata={
            "name": "HorizontalOffset",
            "type": "Element",
            "required": True,
        }
    )
    openable_percent: int = Field(
        metadata={
            "name": "OpenablePercent",
            "type": "Element",
            "required": True,
        }
    )
    head_height: int = Field(
        metadata={
            "name": "HeadHeight",
            "type": "Element",
            "required": True,
        }
    )


class Window(AbstractExternalElement):
    model_config = ConfigDict(defer_build=True)
    window_type: WindowType = Field(
        metadata={
            "name": "WindowType",
            "type": "Element",
            "required": True,
        }
    )
    head_height: int = Field(
        metadata={
            "name": "HeadHeight",
            "type": "Element",
            "required": True,
        }
    )
    openable_percent: int = Field(
        metadata={
            "name": "OpenablePercent",
            "type": "Element",
            "required": True,
        }
    )
    horizontal_offset: int = Field(
        metadata={
            "name": "HorizontalOffset",
            "type": "Element",
            "required": True,
        }
    )
    is_weather_stripped: bool = Field(
        metadata={
            "name": "IsWeatherStripped",
            "type": "Element",
            "required": True,
        }
    )
    gap_size_type: GapSizeType = Field(
        metadata={
            "name": "GapSizeType",
            "type": "Element",
            "required": True,
        }
    )
    indoor_covering_type: IndoorCoveringType = Field(
        metadata={
            "name": "IndoorCoveringType",
            "type": "Element",
            "required": True,
        }
    )
    outdoor_covering_type: OutdoorCoveringType = Field(
        metadata={
            "name": "OutdoorCoveringType",
            "type": "Element",
            "required": True,
        }
    )
    horizontal_element_shading: Optional[HorizontalElementShading] = Field(
        default=None,
        metadata={
            "name": "HorizontalElementShading",
            "type": "Element",
        },
    )


class ArrayOfConstructionLayer(BaseModel):
    model_config = ConfigDict(defer_build=True)
    construction_layer: list[ConstructionLayer] = Field(
        default_factory=list,
        metadata={
            "name": "ConstructionLayer",
            "type": "Element",
            "nillable": True,
        },
    )


class ArrayOfDoor(BaseModel):
    model_config = ConfigDict(defer_build=True)
    door: list[Door] = Field(
        default_factory=list,
        metadata={
            "name": "Door",
            "type": "Element",
            "nillable": True,
        },
    )


class ArrayOfFloorCeiling(BaseModel):
    model_config = ConfigDict(defer_build=True)
    floor_ceiling: list[FloorCeiling] = Field(
        default_factory=list,
        metadata={
            "name": "FloorCeiling",
            "type": "Element",
            "nillable": True,
        },
    )


class ArrayOfInternalWall(BaseModel):
    model_config = ConfigDict(defer_build=True)
    internal_wall: list[InternalWall] = Field(
        default_factory=list,
        metadata={
            "name": "InternalWall",
            "type": "Element",
            "nillable": True,
        },
    )


class ArrayOfOpaqueLouvre(BaseModel):
    model_config = ConfigDict(defer_build=True)
    opaque_louvre: list[OpaqueLouvre] = Field(
        default_factory=list,
        metadata={
            "name": "OpaqueLouvre",
            "type": "Element",
            "nillable": True,
        },
    )


class ArrayOfWindow(BaseModel):
    model_config = ConfigDict(defer_build=True)
    window: list[Window] = Field(
        default_factory=list,
        metadata={
            "name": "Window",
            "type": "Element",
            "nillable": True,
        },
    )


class RoofWindow(AbstractSkylightRoofWindow):
    pass
    model_config = ConfigDict(defer_build=True)


class Skylight(AbstractSkylightRoofWindow):
    model_config = ConfigDict(defer_build=True)
    zone_lit_id: Optional[str] = Field(
        default=None,
        metadata={
            "name": "ZoneLitId",
            "type": "Element",
        },
    )
    shaft_type: ShaftType = Field(
        metadata={
            "name": "ShaftType",
            "type": "Element",
            "required": True,
        }
    )
    shaft_length: int = Field(
        metadata={
            "name": "ShaftLength",
            "type": "Element",
            "required": True,
        }
    )
    shaft_reflectance: float = Field(
        metadata={
            "name": "ShaftReflectance",
            "type": "Element",
            "required": True,
        }
    )
    shaft_insulation_rvalue: float = Field(
        metadata={
            "name": "ShaftInsulationRValue",
            "type": "Element",
            "required": True,
        }
    )
    is_vented: bool = Field(
        metadata={
            "name": "IsVented",
            "type": "Element",
            "required": True,
        }
    )


class AbstractConstruction(AbstractBase):
    model_config = ConfigDict(defer_build=True)
    name: Optional[str] = Field(
        default=None,
        metadata={
            "name": "Name",
            "type": "Element",
        },
    )
    construction_type: ConstructionType = Field(
        metadata={
            "name": "ConstructionType",
            "type": "Element",
            "required": True,
        }
    )
    construction_layers: Optional[ArrayOfConstructionLayer] = Field(
        default=None,
        metadata={
            "name": "ConstructionLayers",
            "type": "Element",
        },
    )


class ArrayOfRoofWindow(BaseModel):
    model_config = ConfigDict(defer_build=True)
    roof_window: list[RoofWindow] = Field(
        default_factory=list,
        metadata={
            "name": "RoofWindow",
            "type": "Element",
            "nillable": True,
        },
    )


class ArrayOfSkylight(BaseModel):
    model_config = ConfigDict(defer_build=True)
    skylight: list[Skylight] = Field(
        default_factory=list,
        metadata={
            "name": "Skylight",
            "type": "Element",
            "nillable": True,
        },
    )


class ExternalWall(AbstractExternalElement):
    model_config = ConfigDict(defer_build=True)
    above_wall_id: Optional[str] = Field(
        default=None,
        metadata={
            "name": "AboveWallId",
            "type": "Element",
        },
    )
    below_wall_id: Optional[str] = Field(
        default=None,
        metadata={
            "name": "BelowWallId",
            "type": "Element",
        },
    )
    is_wall_in_courtyard: bool = Field(
        metadata={
            "name": "IsWallInCourtyard",
            "type": "Element",
            "required": True,
        }
    )
    floor_height: int = Field(
        metadata={
            "name": "FloorHeight",
            "type": "Element",
            "required": True,
        }
    )
    is_opening_controlled: bool = Field(
        metadata={
            "name": "IsOpeningControlled",
            "type": "Element",
            "required": True,
        }
    )
    azimuth: int = Field(
        metadata={
            "name": "Azimuth",
            "type": "Element",
            "required": True,
        }
    )
    left_wing_wall: Optional[WingWall] = Field(
        default=None,
        metadata={
            "name": "LeftWingWall",
            "type": "Element",
        },
    )
    right_wing_wall: Optional[WingWall] = Field(
        default=None,
        metadata={
            "name": "RightWingWall",
            "type": "Element",
        },
    )
    horizontal_element_shading: Optional[HorizontalElementShading] = Field(
        default=None,
        metadata={
            "name": "HorizontalElementShading",
            "type": "Element",
        },
    )
    infiltration_penetrations: Optional[ArrayOfInfiltrationPenetration] = (
        Field(
            default=None,
            metadata={
                "name": "InfiltrationPenetrations",
                "type": "Element",
            },
        )
    )
    vertical_element_shadings: Optional[ArrayOfVerticalElementShading] = Field(
        default=None,
        metadata={
            "name": "VerticalElementShadings",
            "type": "Element",
        },
    )
    doors: Optional[ArrayOfDoor] = Field(
        default=None,
        metadata={
            "name": "Doors",
            "type": "Element",
        },
    )
    windows: Optional[ArrayOfWindow] = Field(
        default=None,
        metadata={
            "name": "Windows",
            "type": "Element",
        },
    )
    opaque_louvres: Optional[ArrayOfOpaqueLouvre] = Field(
        default=None,
        metadata={
            "name": "OpaqueLouvres",
            "type": "Element",
        },
    )


class ArrayOfExternalWall(BaseModel):
    model_config = ConfigDict(defer_build=True)
    external_wall: list[ExternalWall] = Field(
        default_factory=list,
        metadata={
            "name": "ExternalWall",
            "type": "Element",
            "nillable": True,
        },
    )


class ExternalConstruction(AbstractConstruction):
    model_config = ConfigDict(defer_build=True)
    external_colour_type: ExternalColourType = Field(
        metadata={
            "name": "ExternalColourType",
            "type": "Element",
            "required": True,
        }
    )
    external_absorptance: int = Field(
        metadata={
            "name": "ExternalAbsorptance",
            "type": "Element",
            "required": True,
        }
    )
    internal_colour_type: InternalColourType = Field(
        metadata={
            "name": "InternalColourType",
            "type": "Element",
            "required": True,
        }
    )
    internal_absorptance: int = Field(
        metadata={
            "name": "InternalAbsorptance",
            "type": "Element",
            "required": True,
        }
    )
    emissivity: float = Field(
        metadata={
            "name": "Emissivity",
            "type": "Element",
            "required": True,
        }
    )
    fixing_data: Optional[FixingData] = Field(
        default=None,
        metadata={
            "name": "FixingData",
            "type": "Element",
        },
    )


class GlazedConstruction(AbstractConstruction):
    model_config = ConfigDict(defer_build=True)
    from_library: Optional[str] = Field(
        default=None,
        metadata={
            "name": "FromLibrary",
            "type": "Element",
        },
    )
    system_code: Optional[str] = Field(
        default=None,
        metadata={
            "name": "SystemCode",
            "type": "Element",
        },
    )
    frame_colour_type: FrameColourType = Field(
        metadata={
            "name": "FrameColourType",
            "type": "Element",
            "required": True,
        }
    )
    frame_absorptance: int = Field(
        metadata={
            "name": "FrameAbsorptance",
            "type": "Element",
            "required": True,
        }
    )
    frame_type: FrameType = Field(
        metadata={
            "name": "FrameType",
            "type": "Element",
            "required": True,
        }
    )
    frame_fraction: int = Field(
        metadata={
            "name": "FrameFraction",
            "type": "Element",
            "required": True,
        }
    )
    fixing_data: Optional[FixingData] = Field(
        default=None,
        metadata={
            "name": "FixingData",
            "type": "Element",
        },
    )


class InternalConstruction(AbstractConstruction):
    model_config = ConfigDict(defer_build=True)
    first_colour_type: InternalColourType = Field(
        metadata={
            "name": "FirstColourType",
            "type": "Element",
            "required": True,
        }
    )
    first_absorptance: int = Field(
        metadata={
            "name": "FirstAbsorptance",
            "type": "Element",
            "required": True,
        }
    )
    last_colour_type: InternalColourType = Field(
        metadata={
            "name": "LastColourType",
            "type": "Element",
            "required": True,
        }
    )
    last_absorptance: int = Field(
        metadata={
            "name": "LastAbsorptance",
            "type": "Element",
            "required": True,
        }
    )
    fixing_data: Optional[FixingData] = Field(
        default=None,
        metadata={
            "name": "FixingData",
            "type": "Element",
        },
    )


class Roof(AbstractExternalElement):
    model_config = ConfigDict(defer_build=True)
    roof_exposure_type: RoofExposureType = Field(
        metadata={
            "name": "RoofExposureType",
            "type": "Element",
            "required": True,
        }
    )
    azimuth: int = Field(
        metadata={
            "name": "Azimuth",
            "type": "Element",
            "required": True,
        }
    )
    pitch: float = Field(
        metadata={
            "name": "Pitch",
            "type": "Element",
            "required": True,
        }
    )
    gross_area: float = Field(
        metadata={
            "name": "GrossArea",
            "type": "Element",
            "required": True,
        }
    )
    skylights: Optional[ArrayOfSkylight] = Field(
        default=None,
        metadata={
            "name": "Skylights",
            "type": "Element",
        },
    )
    roof_windows: Optional[ArrayOfRoofWindow] = Field(
        default=None,
        metadata={
            "name": "RoofWindows",
            "type": "Element",
        },
    )
    infiltration_penetrations: Optional[ArrayOfInfiltrationPenetration] = (
        Field(
            default=None,
            metadata={
                "name": "InfiltrationPenetrations",
                "type": "Element",
            },
        )
    )


class ArrayOfExternalConstruction(BaseModel):
    model_config = ConfigDict(defer_build=True)
    external_construction: list[ExternalConstruction] = Field(
        default_factory=list,
        metadata={
            "name": "ExternalConstruction",
            "type": "Element",
            "nillable": True,
        },
    )


class ArrayOfGlazedConstruction(BaseModel):
    model_config = ConfigDict(defer_build=True)
    glazed_construction: list[GlazedConstruction] = Field(
        default_factory=list,
        metadata={
            "name": "GlazedConstruction",
            "type": "Element",
            "nillable": True,
        },
    )


class ArrayOfInternalConstruction(BaseModel):
    model_config = ConfigDict(defer_build=True)
    internal_construction: list[InternalConstruction] = Field(
        default_factory=list,
        metadata={
            "name": "InternalConstruction",
            "type": "Element",
            "nillable": True,
        },
    )


class ArrayOfRoof(BaseModel):
    model_config = ConfigDict(defer_build=True)
    roof: list[Roof] = Field(
        default_factory=list,
        metadata={
            "name": "Roof",
            "type": "Element",
            "nillable": True,
        },
    )


class Development(AbstractBase):
    model_config = ConfigDict(defer_build=True)
    name: Optional[str] = Field(
        default=None,
        metadata={
            "name": "Name",
            "type": "Element",
        },
    )
    internal_constructions: Optional[ArrayOfInternalConstruction] = Field(
        default=None,
        metadata={
            "name": "InternalConstructions",
            "type": "Element",
        },
    )
    external_constructions: Optional[ArrayOfExternalConstruction] = Field(
        default=None,
        metadata={
            "name": "ExternalConstructions",
            "type": "Element",
        },
    )
    glazed_constructions: Optional[ArrayOfGlazedConstruction] = Field(
        default=None,
        metadata={
            "name": "GlazedConstructions",
            "type": "Element",
        },
    )
    horizontal_shadings: Optional[ArrayOfHorizontalShading] = Field(
        default=None,
        metadata={
            "name": "HorizontalShadings",
            "type": "Element",
        },
    )
    vertical_shadings: Optional[ArrayOfVerticalShading] = Field(
        default=None,
        metadata={
            "name": "VerticalShadings",
            "type": "Element",
        },
    )


class Zone(AbstractBase):
    model_config = ConfigDict(defer_build=True)
    design_variation_id: Optional[str] = Field(
        default=None,
        metadata={
            "name": "DesignVariationId",
            "type": "Element",
        },
    )
    name: Optional[str] = Field(
        default=None,
        metadata={
            "name": "Name",
            "type": "Element",
        },
    )
    zone_type: ZoneType = Field(
        metadata={
            "name": "ZoneType",
            "type": "Element",
            "required": True,
        }
    )
    volume: float = Field(
        metadata={
            "name": "Volume",
            "type": "Element",
            "required": True,
        }
    )
    floor_height: int = Field(
        metadata={
            "name": "FloorHeight",
            "type": "Element",
            "required": True,
        }
    )
    ceiling_height: int = Field(
        metadata={
            "name": "CeilingHeight",
            "type": "Element",
            "required": True,
        }
    )
    is_heated: bool = Field(
        metadata={
            "name": "IsHeated",
            "type": "Element",
            "required": True,
        }
    )
    is_cooled: bool = Field(
        metadata={
            "name": "IsCooled",
            "type": "Element",
            "required": True,
        }
    )
    is_reflective: bool = Field(
        metadata={
            "name": "IsReflective",
            "type": "Element",
            "required": True,
        }
    )
    roofspace_zone_infiltration: Optional[RoofspaceZoneInfiltration] = Field(
        default=None,
        metadata={
            "name": "RoofspaceZoneInfiltration",
            "type": "Element",
        },
    )
    subfloor_zone_infiltration: Optional[SubfloorZoneInfiltration] = Field(
        default=None,
        metadata={
            "name": "SubfloorZoneInfiltration",
            "type": "Element",
        },
    )
    external_walls: Optional[ArrayOfExternalWall] = Field(
        default=None,
        metadata={
            "name": "ExternalWalls",
            "type": "Element",
        },
    )
    roofs: Optional[ArrayOfRoof] = Field(
        default=None,
        metadata={
            "name": "Roofs",
            "type": "Element",
        },
    )


class ArrayOfZone(BaseModel):
    model_config = ConfigDict(defer_build=True)
    zone: list[Zone] = Field(
        default_factory=list,
        metadata={
            "name": "Zone",
            "type": "Element",
            "nillable": True,
        },
    )


class DesignVariation(AbstractBase):
    model_config = ConfigDict(defer_build=True)
    project_id: Optional[str] = Field(
        default=None,
        metadata={
            "name": "ProjectId",
            "type": "Element",
        },
    )
    name: Optional[str] = Field(
        default=None,
        metadata={
            "name": "Name",
            "type": "Element",
        },
    )
    description: Optional[str] = Field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
        },
    )
    submitted_date_time: Optional[datetime] = Field(
        metadata={
            "name": "SubmittedDateTime",
            "type": "Element",
            "nillable": True,
        }
    )
    heating_cooling_limit: Optional[HeatingCoolingLimit] = Field(
        default=None,
        metadata={
            "name": "HeatingCoolingLimit",
            "type": "Element",
        },
    )
    zones: Optional[ArrayOfZone] = Field(
        default=None,
        metadata={
            "name": "Zones",
            "type": "Element",
        },
    )
    ventilation: Optional[Ventilation] = Field(
        default=None,
        metadata={
            "name": "Ventilation",
            "type": "Element",
        },
    )
    internal_walls: Optional[ArrayOfInternalWall] = Field(
        default=None,
        metadata={
            "name": "InternalWalls",
            "type": "Element",
        },
    )
    floor_ceilings: Optional[ArrayOfFloorCeiling] = Field(
        default=None,
        metadata={
            "name": "FloorCeilings",
            "type": "Element",
        },
    )
    cooling_module: Optional[CoolingModule] = Field(
        default=None,
        metadata={
            "name": "CoolingModule",
            "type": "Element",
        },
    )
    heating_module: Optional[HeatingModule] = Field(
        default=None,
        metadata={
            "name": "HeatingModule",
            "type": "Element",
        },
    )
    hot_water_module: Optional[HotWaterModule] = Field(
        default=None,
        metadata={
            "name": "HotWaterModule",
            "type": "Element",
        },
    )
    lighting_module: Optional[LightingModule] = Field(
        default=None,
        metadata={
            "name": "LightingModule",
            "type": "Element",
        },
    )
    plug_load_module: Optional[PlugLoadModule] = Field(
        default=None,
        metadata={
            "name": "PlugLoadModule",
            "type": "Element",
        },
    )
    pool_spa_module: Optional[PoolSpaModule] = Field(
        default=None,
        metadata={
            "name": "PoolSpaModule",
            "type": "Element",
        },
    )
    solar_pv_module: Optional[SolarPvModule] = Field(
        default=None,
        metadata={
            "name": "SolarPvModule",
            "type": "Element",
        },
    )


class ArrayOfDesignVariation(BaseModel):
    model_config = ConfigDict(defer_build=True)
    design_variation: list[DesignVariation] = Field(
        default_factory=list,
        metadata={
            "name": "DesignVariation",
            "type": "Element",
            "nillable": True,
        },
    )


class Project(AbstractBase):
    model_config = ConfigDict(defer_build=True)
    name: Optional[str] = Field(
        default=None,
        metadata={
            "name": "Name",
            "type": "Element",
        },
    )
    code: Optional[str] = Field(
        default=None,
        metadata={
            "name": "Code",
            "type": "Element",
        },
    )
    additional_information: Optional[str] = Field(
        default=None,
        metadata={
            "name": "AdditionalInformation",
            "type": "Element",
        },
    )
    default_design_variation_id: Optional[str] = Field(
        default=None,
        metadata={
            "name": "DefaultDesignVariationId",
            "type": "Element",
        },
    )
    building_class_type: BuildingClassType = Field(
        metadata={
            "name": "BuildingClassType",
            "type": "Element",
            "required": True,
        }
    )
    accu_rate_engine_version: AccuRateEngineVersion = Field(
        metadata={
            "name": "AccuRateEngineVersion",
            "type": "Element",
            "required": True,
        }
    )
    chenath_engine_version: ChenathEngineVersion = Field(
        metadata={
            "name": "ChenathEngineVersion",
            "type": "Element",
            "required": True,
        }
    )
    declaration_of_interest_type: DeclarationOfInterestType = Field(
        metadata={
            "name": "DeclarationOfInterestType",
            "type": "Element",
            "required": True,
        }
    )
    plan_document: Optional[PlanDocument] = Field(
        default=None,
        metadata={
            "name": "PlanDocument",
            "type": "Element",
        },
    )
    assessor: Optional[Assessor] = Field(
        default=None,
        metadata={
            "name": "Assessor",
            "type": "Element",
        },
    )
    client: Optional[Client] = Field(
        default=None,
        metadata={
            "name": "Client",
            "type": "Element",
        },
    )
    dwelling: Optional[Dwelling] = Field(
        default=None,
        metadata={
            "name": "Dwelling",
            "type": "Element",
        },
    )
    acknowledgement: Optional[Acknowledgement] = Field(
        default=None,
        metadata={
            "name": "Acknowledgement",
            "type": "Element",
        },
    )
    design_variations: Optional[ArrayOfDesignVariation] = Field(
        default=None,
        metadata={
            "name": "DesignVariations",
            "type": "Element",
        },
    )
    development: Optional[Development] = Field(
        default=None,
        metadata={
            "name": "Development",
            "type": "Element",
        },
    )
    simulation_configuration: Optional[SimulationConfiguration] = Field(
        default=None,
        metadata={
            "name": "SimulationConfiguration",
            "type": "Element",
        },
    )
